# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunActionResponse

    RunActionResponse(;
        event_id=nothing,
        results=nothing,
        errors=nothing,
    )

    - event_id::Int64 : Unique identifier for the action event
    - results::Dict{String, Any} : Model-specific results of the action
    - errors::Vector{ErrorResponse} : List of errors that occurred during the action call, but were not fatal and the action was still completed successfully
"""
Base.@kwdef mutable struct RunActionResponse <: OpenAPI.APIModel
    event_id::Union{Nothing, Int64} = nothing
    results::Union{Nothing, Dict{String, Any}} = nothing
    errors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ErrorResponse} }

    function RunActionResponse(event_id, results, errors, )
        OpenAPI.validate_property(RunActionResponse, Symbol("event_id"), event_id)
        OpenAPI.validate_property(RunActionResponse, Symbol("results"), results)
        OpenAPI.validate_property(RunActionResponse, Symbol("errors"), errors)
        return new(event_id, results, errors, )
    end
end # type RunActionResponse

const _property_types_RunActionResponse = Dict{Symbol,String}(Symbol("event_id")=>"Int64", Symbol("results")=>"Dict{String, Any}", Symbol("errors")=>"Vector{ErrorResponse}", )
OpenAPI.property_type(::Type{ RunActionResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunActionResponse[name]))}

function check_required(o::RunActionResponse)
    o.event_id === nothing && (return false)
    o.results === nothing && (return false)
    o.errors === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunActionResponse }, name::Symbol, val)

    if name === Symbol("event_id")
        OpenAPI.validate_param(name, "RunActionResponse", :format, val, "int64")
    end


end
